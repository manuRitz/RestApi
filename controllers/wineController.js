/** * controller for the wine model * @returns {wineController} return wineController */function wineController() {    var Wine = require('../models/wine');    var mongoose = require('../db').mongoose;    /**     * get all wines     * @param {request} req request     * @param {response} res response     * @returns {void}     */    this.getWine = function (req, res) {        //search parameters available        if (req.params) {            //validate search parameters            var params = req.params;            for (var param in req.params) {                if (param !== 'year' && param !== 'name' && param !== 'type' && param !== 'country') {                    delete params[param];                }            }            mongoose.model('wines').find(params, function (err, wine) {                res.send(wine);            })        } else {            mongoose.model('wines').find(function (err, wine) {                res.send(wine);            })        }    };    /**     * get wine by id     * @param {request} req request     * @param {response} res response     * @returns {void}     */    this.getWineById = function (req, res) {        mongoose.model('wines').findOne({'_id': req.params.id}, function (err, wine) {            if (wine === null || err) {                res.send(400, {'error': 'UNKNOWN_OBJECT'});            } else {                res.send(wine);            }        });    };    /**     * handle validation errors and return error response     * @param {errors} errors error     * @returns {{error: string, validation: {}}} return error response     */    function errorHandling(errors) {        var ValidationErrors = {            REQUIRED: 'required',            NOTNUMBER: 'user defined',            ENUMNOTVALID: 'enum'        };        var errMessage = {            error: 'VALIDATION_ERROR',            validation: {}        };        for (var errName in errors) {            switch (errors[errName].kind) {                case ValidationErrors.REQUIRED:                    errMessage.validation[errName] = 'MISSING';                    break;                case ValidationErrors.ENUMNOTVALID:                    errMessage.validation[errName] = 'INVALID';                    break;                case ValidationErrors.NOTNUMBER:                    errMessage.validation[errName] = 'INVALID';                    break;            }        }        return errMessage;    }    /**     * post a wine and validate params     * @param {request} req request     * @param {response} res response     * @returns {void}     */    this.postWine = function (req, res) {        var newWine = new Wine(req.params);        newWine.save(function (err, wine) {            if (err) {                var errMessage = errorHandling(err.errors);                res.send(400, errMessage);            } else {                res.send(wine);            }        });    };    /**     * update a wine by id and validate params     * @param {request} req request     * @param {response} res response     * @returns {void}     */    this.putWine = function (req, res) {        mongoose.model('wines').findOneAndUpdate({'_id': req.params.id}, {$set: req.params}, {runValidators: true}, function (err, wine) {            if (wine === null || err) {                if (wine === null || err.name === 'CastError') {                    res.send(400, {'error': 'UNKNOWN_OBJECT'});                }                res.send(400, errorHandling(err.errors));            } else {                Wine.findOne({'_id': req.params.id}, function (err, data) {                    res.send(data);                });            }        })    };    /**     * delete a wine by id     * @param {request} req request     * @param {response} res response     * @returns {void}     */    this.deleteWine = function (req, res) {        mongoose.model('wines').findOne({'_id': req.params.id}, function (err, wine) {            if (wine === null || err) {                res.send(400, {error: 'UNKNOWN_OBJECT'});            } else {                wine.remove();                res.send({success: true});            }        })    };    return this;}module.exports = new wineController();